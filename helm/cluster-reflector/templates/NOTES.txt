1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "cluster-reflector.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "cluster-reflector.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "cluster-reflector.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "cluster-reflector.selectorLabels" . | replace "\n" "," }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Test the cluster-reflector service:

   # Check health
   curl http://localhost:8080/healthz

   # Get cluster information
   curl http://localhost:8080/cluster-info

3. To publish an AppVersion custom resource:

   kubectl apply -f - <<EOF
   apiVersion: cluster.grid.sce.com/v1alpha1
   kind: AppVersion
   metadata:
     name: my-app
     namespace: {{ .Release.Namespace }}
   spec:
     name: my-app
     version: "1.0.0"
   EOF

4. Configuration options:
{{- if .Values.appDiscovery.crdOnly }}
   - CRD-only mode is ENABLED (only AppVersion CRDs will be discovered)
{{- else }}
   - CRD-only mode is DISABLED (workload discovery is available)
{{- end }}
{{- if .Values.appDiscovery.preferCRD }}
   - CRD preference is ENABLED (AppVersion CRDs take priority)
{{- else }}
   - CRD preference is DISABLED (workload discovery takes priority)
{{- end }}
{{- if .Values.appDiscovery.fallbackWorkloads }}
   - Workload fallback is ENABLED (fallback to workload discovery)
{{- else }}
   - Workload fallback is DISABLED (no fallback to workloads)
{{- end }}

5. Monitor the application:
{{- if .Values.serviceMonitor.enabled }}
   - ServiceMonitor is enabled for Prometheus scraping
{{- else }}
   - ServiceMonitor is disabled (set serviceMonitor.enabled=true to enable)
{{- end }}
{{- if .Values.hpa.enabled }}
   - HPA is enabled for automatic scaling
{{- else }}
   - HPA is disabled (set hpa.enabled=true to enable)
{{- end }}

For more information about cluster-reflector, visit:
https://github.com/yourorg/cluster-reflector
